google.charts.load('current', { 'packages': ['corechart'] });

// Helper function to create a section with a title and content
function createSection(title, content) {
    const section = document.createElement('div');
    section.classList.add('section');
    section.innerHTML = `<h2>${title}</h2>${content}`;
    return section;
}
// Modify your loadAndDisplayPersonData function to include chart creation
async function loadAndDisplayPersonData(personDir) {
    const phrData = await fetchJSONData(personDir, 'phr.json');

    // Extract the blood pressure data from the JSON file
    const bloodPressureData = phrData.smartDeviceData.smartBloodPressureMonitor;

    // Display the PHR data as you were doing before
    const phrInfo = document.getElementById('phr-info');
    phrInfo.innerHTML = `
        <h2>Primary Care Physician</h2>
        <p>Name: ${phrData.primaryCarePhysician.name}</p>
        <p>Phone Number: ${phrData.primaryCarePhysician.phoneNumber}</p>
        <p>Address: ${phrData.primaryCarePhysician.address}</p>
        
        <h2>Medical History</h2>
        <p>Allergies: ${phrData.medicalHistory.allergies.join(', ')}</p>
        <p>Chronic Conditions: ${phrData.medicalHistory.chronicConditions.join(', ')}</p>
        <p>Surgeries: ${phrData.medicalHistory.surgeries.join(', ')}</p>
        <p>Medications: ${phrData.medicalHistory.medications.join(', ')}</p>
        
        <h2>Recent Visits</h2>
        ${phrData.recentVisits.map(visit => `
            <p>Date: ${visit.date}</p>
            <p>Reason: ${visit.reason}</p>
            <p>Findings: ${visit.findings}</p>
            <p>Prescriptions: ${Array.isArray(visit.prescriptions) ? visit.prescriptions.join(', ') : 'N/A'}</p>
        `).join('')}
        
        <h2>Immunizations</h2>
        <p>Flu: ${phrData.immunizations.flu}</p>
        <p>Tetanus: ${phrData.immunizations.tetanus}</p>
        <p>Hepatitis B: ${phrData.immunizations.hepatitisB}</p>
        <p>COVID-19: ${phrData.immunizations.covid19}</p>
        
        <h2>Lifestyle</h2>
        <p>Diet: ${phrData.lifestyle.diet}</p>
        <p>Exercise: ${phrData.lifestyle.exercise}</p>
        <p>Tobacco Use: ${phrData.lifestyle.tobaccoUse}</p>
        <p>Alcohol Consumption: ${phrData.lifestyle.alcoholConsumption}</p>
        
        <h2>Family History</h2>
        <p>Father: ${phrData.familyHistory.father}</p>
        <p>Mother: ${phrData.familyHistory.mother}</p>
        <p>Siblings: ${phrData.familyHistory.siblings}</p>
        
        <h2>Smart Device Data</h2>
        
        <h3>Smart Blood Pressure Monitor</h3>
        <ul>
            ${phrData.smartDeviceData.smartBloodPressureMonitor.map(bp => `
                <li>Date: ${bp.fromDate} - ${bp.toDate}, Values: ${bp.values}</li>
            `).join('')}
        </ul>
        
        <h3>Smart Scale</h3>
        <ul>
            ${phrData.smartDeviceData.smartScale.map(scale => `
                <li>Date: ${scale.fromDate} - ${scale.toDate}, Weight: ${scale.weight}, Body Fat Percentage: ${scale.bodyFatPercentage}</li>
            `).join('')}
        </ul>
        
        <h3>Pulse Oximeter</h3>
        <ul>
            ${phrData.smartDeviceData.pulseOximeter.map(oximeter => `
                <li>Date: ${oximeter.fromDate} - ${oximeter.toDate}, Oxygen Level: ${oximeter.oxygenLevel}, Heart Rate: ${oximeter.heartRate}</li>
            `).join('')}
        </ul>
        
        <h3>Sleep Tracker</h3>
        <ul>
            ${phrData.smartDeviceData.sleepTracker.map(sleep => `
                <li>Date: ${sleep.fromDate} - ${sleep.toDate}, Sleep Duration: ${sleep.sleepDuration}, Sleep Quality: ${sleep.sleepQuality}</li>
            `).join('')}
        </ul>
        
        <h3>Continuous Glucose Monitor</h3>
        <ul>
            ${phrData.smartDeviceData.continuousGlucoseMonitor.map(glucose => `
                <li>Date: ${glucose.fromDate} - ${glucose.toDate}, Blood Sugar Level: ${glucose.bloodSugarLevel}</li>
            `).join('')}
        </ul>
        
        <h3>Hydration Monitor</h3>
        <ul>
            ${phrData.smartDeviceData.hydrationMonitor.map(hydration => `
                <li>Date: ${hydration.fromDate} - ${hydration.toDate}, Hydration Level: ${hydration.hydrationLevel}</li>
            `).join('')}
        </ul>
        
        <h3>Physical Activity Monitor</h3>
        <ul>
            ${phrData.smartDeviceData.physicalActivityMonitor.map(activity => `
                <li>Date: ${activity.fromDate} - ${activity.toDate}, Daily Steps: ${activity.dailySteps}</li>
            `).join('')}
        </ul>
    `;


    // Load the Google Charts library and set a callback to create the chart
    google.charts.setOnLoadCallback(() => createBloodPressureChart(bloodPressureData));
}

// Function to create a blood pressure chart using Google Charts
function createBloodPressureChart(data) {
    const dataTable = new google.visualization.DataTable();
    dataTable.addColumn('date', 'Date');
    dataTable.addColumn('number', 'Systolic Pressure (mmHg)');
    dataTable.addColumn('number', 'Diastolic Pressure (mmHg)');

    data.forEach(entry => {
        const dateParts = entry.fromDate.split('.');
        const date = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);
        const systolic = parseFloat(entry.values.split('/')[0]);
        const diastolic = parseFloat(entry.values.split('/')[1]);
        dataTable.addRow([date, systolic, diastolic]);
    });

    const options = {
        title: 'Blood Pressure Over Time',
        curveType: 'function',
        legend: { position: 'bottom' }
    };

    const chart = new google.visualization.LineChart(document.getElementById('bloodPressureChart'));
    chart.draw(dataTable, options);
}
function createWeightChart(data) {
    const dataTable = new google.visualization.DataTable();
    dataTable.addColumn('date', 'Date');
    dataTable.addColumn('number', 'weight (kg)');

    data.forEach(entry => {
        const dateParts = entry.fromDate.split('.');
        const date = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);
        const weight = parseFloat(entry.values.split('/')[0]);
        dataTable.addRow([date, weight]);
    });

    const options = {
        title: 'Weight Over Time',
        curveType: 'function',
        legend: { position: 'bottom' }
    };

    const chart = new google.visualization.LineChart(document.getElementById('weightChart'));
    chart.draw(dataTable, options);
}

// Call loadAndDisplayPersonData for the initial person
loadAndDisplayPersonData(`Source data-20230909T223102Z-001/Source data/${personData[0].dir}`);